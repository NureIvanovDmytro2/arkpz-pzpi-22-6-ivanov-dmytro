Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра «Програмної інженерії»



Лабораторна робота №4
 РОЗРОБКА IoT КЛІЄНТА 
(БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ НАЛАШТУВАННЯ)





Роботу виконав:
студент 3 курсу
факультету
«Комп’ютерні науки»
групи ПЗПІ-22-6
Іванов Д.С.







Харків 2025

1. Опис інженерних рішень
1.1 Призначення IoT клієнта
Метою розробки цього IoT клієнта є створення програми для керування транспортними засобами через REST API. Клієнт взаємодіє з сервером, що обробляє запити на додавання, оновлення, видалення та отримання даних про транспортні засоби. Крім того, додано можливість отримувати статистику про кількість транспортних засобів та фільтрувати їх за роком.
1.2 Архітектура системи
Проект побудований на основі ASP.NET Core Web API. Основні компоненти:
• VehicleManagementAPI: API для взаємодії з базою даних транспортних засобів.
• Swagger: Інтерфейс для автоматичної документації та тестування API.
• SQLite: Легка база даних, що зберігає інформацію про транспортні засоби.
Ключові класи:
• VehicleDbContext: Контекст бази даних, що відповідає за зберігання даних транспортних засобів.
• VehicleController: Контролер API для управління транспортними засобами (GET, POST, PUT, DELETE).
• AdminController: Контролер для адміністраторів, що надає статистику про транспортні засоби (загальна кількість, фільтрація по року).
• VehicleService: Сервіс для обробки бізнес-логіки, та взаємодії з базою даних.
2. UML діаграма прецедентів для IoT клієнта
2.1 Опис діаграми прецедентів
Діаграма прецедентів показує основні взаємодії користувача з системою:
• Адміністратор може отримувати загальну кількість транспортних засобів або фільтрувати їх за роком.
• Адміністратор може взаємодіяти з API для додавання, оновлення та видалення транспортних засобів.

3. UML діаграма діяльності для IoT клієнта
3.1 Опис діаграми діяльності
У цій діаграмі показано загальний процес обробки запитів:
1. Ініціалізація клієнта: Підключення до API через HTTPS.
2. Обробка запитів:
o GET: Отримання даних про транспортні засоби.
o POST: Додавання нового транспортного засобу.
o PUT: Оновлення інформації про існуючий транспортний засіб.
o DELETE: Видалення транспортного засобу.
3. Відповідь від API: Повернення результату після обробки запиту.
Відео - https://youtu.be/SFrpNUuBowk
